fetch(getBackendServerUrl()+"events").then(function(e){return e.json()}).then(e=>{if(e){let t=document.createElement("script");e.forEach(e=>{let a=`async function ${e.eventName}(ev, url_params={}){
                            let element,targetElement, formID; 
                             if(ev){
                               element =  ev.target|| ev.srcElement ;
                               targetElement = ev.currentTarget ;
                               ev.preventDefault();
                               formID = element && element.id ? $("#"+element.id):'';
                             } 
                             const ifValidToProcess = ev && ev.type === "submit" ? formID && formID.valid() && formID.validate().pendingRequest === 0 : true;
                             let formSubmitBtn;
                             let formSubmitBtnText;
                             if(formID){
                              formSubmitBtn = formID.find(':button[type=submit]');
                              formSubmitBtnText = formSubmitBtn.html()
                             }
                            
                             if(ifValidToProcess) {
                              let { dataset: targetElemDataset } = element || {};
                              let preventDblClick = false;
                              if (targetElemDataset && targetElemDataset.hasOwnProperty('preventDblclick')) {
                                preventDblClick = true;
                              }
                              if (preventDblClick) {
                                let timeoutDuration = 5000;
                                if (targetElemDataset.hasOwnProperty('disableDuration')) {
                                  const typeOfDisableDurationValue = typeof Number(targetElemDataset['disableDuration']);
                                  if (typeOfDisableDurationValue === 'number') {
                                    timeoutDuration = Number(targetElemDataset['disableDuration']);
                                  }
                                }
                                element.style.pointerEvents = 'none';
                                element.style.opacity = '0.5';
                                setTimeout(() => {
                                  element.style.pointerEvents = 'auto';
                                  element.style.opacity = '1';
                                }, timeoutDuration);
                              }
                              formSubmitBtn && formSubmitBtn.prop('disabled', true);
                              formSubmitBtn && formSubmitBtn.empty().append("<i class='fa fa-spinner fa-spin'></i>");
                                let response;let argsData;
                                try{`;e.actions.filter(e=>!!e.step).sort((e,t)=>e.step>t.step?1:e.step==t.step?0:-1).forEach((e,t)=>{var r=e.parameters;let n={};r.forEach(e=>{n[e.name]=e.value});r=`
            if(response && response.status==='error' && ${"showAlertMessage"!==e.name}){
              formSubmitBtn && formSubmitBtn.prop('disabled', false);
              formSubmitBtn && formSubmitBtn.html(formSubmitBtnText);
                    return;
              }
              argsData={
                parameters:${JSON.stringify(n)},response:response && response.data?response.data:'',element:element, targetElement:targetElement, url_params:url_params
              }
              response = await ${e.name}(argsData);
            `;a+=`
  `+r}),a+=`
            formSubmitBtn && formSubmitBtn.prop('disabled', false);
            formSubmitBtn &&  formSubmitBtn.html(formSubmitBtnText);
          }
                 catch(error){
                    console.log("error",error)
                    formSubmitBtn && formSubmitBtn.prop('disabled', false);
                    formSubmitBtn && formSubmitBtn.html(formSubmitBtnText);
                  }
                 } else {
                   console.log("I am submit event and not valid")
                 }
                }`,t.innerHTML=t.innerHTML+"\n\n"+a}),document.head.appendChild(t)}else console.error("error")});
//# sourceMappingURL=utils.js.map